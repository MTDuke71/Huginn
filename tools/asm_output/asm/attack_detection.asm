; Listing generated by Microsoft (R) Optimizing Compiler Version 19.44.35215.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	_Avx2WmemEnabledWeakValue
;	COMDAT _Avx2WmemEnabledWeakValue
_BSS	SEGMENT
_Avx2WmemEnabledWeakValue DD 01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
?PIECE_VALUES_MG@@3V?$array@H$06@std@@B DD 00H		; PIECE_VALUES_MG
	DD	064H
	DD	0140H
	DD	014aH
	DD	01f4H
	DD	0384H
	DD	04e20H
	ORG $+4
?BIT_MASK@@3QB_KB DQ 0000000000000001H			; BIT_MASK
	DQ	0000000000000002H
	DQ	0000000000000004H
	DQ	0000000000000008H
	DQ	0000000000000010H
	DQ	0000000000000020H
	DQ	0000000000000040H
	DQ	0000000000000080H
	DQ	0000000000000100H
	DQ	0000000000000200H
	DQ	0000000000000400H
	DQ	0000000000000800H
	DQ	0000000000001000H
	DQ	0000000000002000H
	DQ	0000000000004000H
	DQ	0000000000008000H
	DQ	0000000000010000H
	DQ	0000000000020000H
	DQ	0000000000040000H
	DQ	0000000000080000H
	DQ	0000000000100000H
	DQ	0000000000200000H
	DQ	0000000000400000H
	DQ	0000000000800000H
	DQ	0000000001000000H
	DQ	0000000002000000H
	DQ	0000000004000000H
	DQ	0000000008000000H
	DQ	0000000010000000H
	DQ	0000000020000000H
	DQ	0000000040000000H
	DQ	0000000080000000H
	DQ	0000000100000000H
	DQ	0000000200000000H
	DQ	0000000400000000H
	DQ	0000000800000000H
	DQ	0000001000000000H
	DQ	0000002000000000H
	DQ	0000004000000000H
	DQ	0000008000000000H
	DQ	0000010000000000H
	DQ	0000020000000000H
	DQ	0000040000000000H
	DQ	0000080000000000H
	DQ	0000100000000000H
	DQ	0000200000000000H
	DQ	0000400000000000H
	DQ	0000800000000000H
	DQ	0001000000000000H
	DQ	0002000000000000H
	DQ	0004000000000000H
	DQ	0008000000000000H
	DQ	0010000000000000H
	DQ	0020000000000000H
	DQ	0040000000000000H
	DQ	0080000000000000H
	DQ	0100000000000000H
	DQ	0200000000000000H
	DQ	0400000000000000H
	DQ	0800000000000000H
	DQ	1000000000000000H
	DQ	2000000000000000H
	DQ	4000000000000000H
	DQ	8000000000000000H
?CLEAR_MASK@@3QB_KB DQ fffffffffffffffeH		; CLEAR_MASK
	DQ	fffffffffffffffdH
	DQ	fffffffffffffffbH
	DQ	fffffffffffffff7H
	DQ	ffffffffffffffefH
	DQ	ffffffffffffffdfH
	DQ	ffffffffffffffbfH
	DQ	ffffffffffffff7fH
	DQ	fffffffffffffeffH
	DQ	fffffffffffffdffH
	DQ	fffffffffffffbffH
	DQ	fffffffffffff7ffH
	DQ	ffffffffffffefffH
	DQ	ffffffffffffdfffH
	DQ	ffffffffffffbfffH
	DQ	ffffffffffff7fffH
	DQ	fffffffffffeffffH
	DQ	fffffffffffdffffH
	DQ	fffffffffffbffffH
	DQ	fffffffffff7ffffH
	DQ	ffffffffffefffffH
	DQ	ffffffffffdfffffH
	DQ	ffffffffffbfffffH
	DQ	ffffffffff7fffffH
	DQ	fffffffffeffffffH
	DQ	fffffffffdffffffH
	DQ	fffffffffbffffffH
	DQ	fffffffff7ffffffH
	DQ	ffffffffefffffffH
	DQ	ffffffffdfffffffH
	DQ	ffffffffbfffffffH
	DQ	ffffffff7fffffffH
	DQ	fffffffeffffffffH
	DQ	fffffffdffffffffH
	DQ	fffffffbffffffffH
	DQ	fffffff7ffffffffH
	DQ	ffffffefffffffffH
	DQ	ffffffdfffffffffH
	DQ	ffffffbfffffffffH
	DQ	ffffff7fffffffffH
	DQ	fffffeffffffffffH
	DQ	fffffdffffffffffH
	DQ	fffffbffffffffffH
	DQ	fffff7ffffffffffH
	DQ	ffffefffffffffffH
	DQ	ffffdfffffffffffH
	DQ	ffffbfffffffffffH
	DQ	ffff7fffffffffffH
	DQ	fffeffffffffffffH
	DQ	fffdffffffffffffH
	DQ	fffbffffffffffffH
	DQ	fff7ffffffffffffH
	DQ	ffefffffffffffffH
	DQ	ffdfffffffffffffH
	DQ	ffbfffffffffffffH
	DQ	ff7fffffffffffffH
	DQ	feffffffffffffffH
	DQ	fdffffffffffffffH
	DQ	fbffffffffffffffH
	DQ	f7ffffffffffffffH
	DQ	efffffffffffffffH
	DQ	dfffffffffffffffH
	DQ	bfffffffffffffffH
	DQ	7fffffffffffffffH
?SQUARE_FROM_FILE_RANK@@3QAY07$$CBHA DD 00H		; SQUARE_FROM_FILE_RANK
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	08H
	DD	09H
	DD	0aH
	DD	0bH
	DD	0cH
	DD	0dH
	DD	0eH
	DD	0fH
	DD	010H
	DD	011H
	DD	012H
	DD	013H
	DD	014H
	DD	015H
	DD	016H
	DD	017H
	DD	018H
	DD	019H
	DD	01aH
	DD	01bH
	DD	01cH
	DD	01dH
	DD	01eH
	DD	01fH
	DD	020H
	DD	021H
	DD	022H
	DD	023H
	DD	024H
	DD	025H
	DD	026H
	DD	027H
	DD	028H
	DD	029H
	DD	02aH
	DD	02bH
	DD	02cH
	DD	02dH
	DD	02eH
	DD	02fH
	DD	030H
	DD	031H
	DD	032H
	DD	033H
	DD	034H
	DD	035H
	DD	036H
	DD	037H
	DD	038H
	DD	039H
	DD	03aH
	DD	03bH
	DD	03cH
	DD	03dH
	DD	03eH
	DD	03fH
?FILE_OF_SQUARE@@3QBHB DD 00H				; FILE_OF_SQUARE
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
	DD	00H
	DD	01H
	DD	02H
	DD	03H
	DD	04H
	DD	05H
	DD	06H
	DD	07H
?RANK_OF_SQUARE@@3QBHB DD 00H				; RANK_OF_SQUARE
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	00H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	01H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	02H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	03H
	DD	04H
	DD	04H
	DD	04H
	DD	04H
	DD	04H
	DD	04H
	DD	04H
	DD	04H
	DD	05H
	DD	05H
	DD	05H
	DD	05H
	DD	05H
	DD	05H
	DD	05H
	DD	05H
	DD	06H
	DD	06H
	DD	06H
	DD	06H
	DD	06H
	DD	06H
	DD	06H
	DD	06H
	DD	07H
	DD	07H
	DD	07H
	DD	07H
	DD	07H
	DD	07H
	DD	07H
	DD	07H
CONST	ENDS
PUBLIC	?is_none@@YA_NW4Piece@@@Z			; is_none
PUBLIC	?is_offboard@@YA_NW4Piece@@@Z			; is_offboard
PUBLIC	?type_of@@YA?AW4PieceType@@W4Piece@@@Z		; type_of
PUBLIC	?color_of@@YA?AW4Color@@W4Piece@@@Z		; color_of
PUBLIC	??A?$array@H$06@std@@QEBAAEBH_K@Z		; std::array<int,7>::operator[]
PUBLIC	?_Unchecked_begin@?$array@H$07@std@@QEBAPEBHXZ	; std::array<int,8>::_Unchecked_begin
PUBLIC	?_Unchecked_end@?$array@H$07@std@@QEBAPEBHXZ	; std::array<int,8>::_Unchecked_end
PUBLIC	??A?$array@W4File@@$0HI@@std@@QEBAAEBW4File@@_K@Z ; std::array<enum File,120>::operator[]
PUBLIC	??A?$array@W4Rank@@$0HI@@std@@QEBAAEBW4Rank@@_K@Z ; std::array<enum Rank,120>::operator[]
PUBLIC	??A?$array@_N$0HI@@std@@QEBAAEB_N_K@Z		; std::array<bool,120>::operator[]
PUBLIC	?file_of@@YA?AW4File@@H@Z			; file_of
PUBLIC	?rank_of@@YA?AW4Rank@@H@Z			; rank_of
PUBLIC	?is_playable@@YA_NH@Z				; is_playable
PUBLIC	?pawn_capt_left_white@@YAHXZ			; pawn_capt_left_white
PUBLIC	?pawn_capt_right_white@@YAHXZ			; pawn_capt_right_white
PUBLIC	?pawn_capt_left_black@@YAHXZ			; pawn_capt_left_black
PUBLIC	?pawn_capt_right_black@@YAHXZ			; pawn_capt_right_black
PUBLIC	??A?$array@H$01@std@@QEBAAEBH_K@Z		; std::array<int,2>::operator[]
PUBLIC	??A?$array@V?$array@V?$array@H$09@std@@$06@std@@$01@std@@QEBAAEBV?$array@V?$array@H$09@std@@$06@1@_K@Z ; std::array<std::array<std::array<int,10>,7>,2>::operator[]
PUBLIC	??A?$array@V?$array@H$09@std@@$06@std@@QEBAAEBV?$array@H$09@1@_K@Z ; std::array<std::array<int,10>,7>::operator[]
PUBLIC	??A?$array@H$09@std@@QEBAAEBH_K@Z		; std::array<int,10>::operator[]
PUBLIC	??A?$array@V?$array@H$06@std@@$01@std@@QEBAAEBV?$array@H$06@1@_K@Z ; std::array<std::array<int,7>,2>::operator[]
PUBLIC	??A?$array@W4Piece@@$0HI@@std@@QEBAAEBW4Piece@@_K@Z ; std::array<enum Piece,120>::operator[]
PUBLIC	?at@Position@@QEBA?AW4Piece@@H@Z		; Position::at
PUBLIC	?pawn_attacks_square@@YA_NHHW4Color@@@Z		; pawn_attacks_square
PUBLIC	?knight_attacks_square@@YA_NHH@Z		; knight_attacks_square
PUBLIC	?king_attacks_square@@YA_NHH@Z			; king_attacks_square
PUBLIC	?sliding_attacks_rank_file@@YA_NHHAEBVPosition@@@Z ; sliding_attacks_rank_file
PUBLIC	?sliding_attacks_diagonal@@YA_NHHAEBVPosition@@@Z ; sliding_attacks_diagonal
PUBLIC	?SqAttacked@@YA_NHAEBVPosition@@W4Color@@@Z	; SqAttacked
PUBLIC	??$?0$0A@@id@locale@std@@QEAA@XZ		; std::locale::id::id<0>
PUBLIC	?KNIGHT_DELTAS@@3QBHB				; KNIGHT_DELTAS
PUBLIC	?KING_DELTAS@@3V?$array@H$07@std@@B		; KING_DELTAS
PUBLIC	?FILE_RANK_LOOKUPS@@3UFileRankLookups@@B	; FILE_RANK_LOOKUPS
PUBLIC	?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
PUBLIC	?id@?$numpunct@D@std@@2V0locale@2@A		; std::numpunct<char>::id
PUBLIC	__xmm@fffffff5fffffff7000000090000000b
PUBLIC	__xmm@ffffffff00000001fffffff60000000a
;	COMDAT ?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$num_put@DV?$ostreambuf_iterator@DU?$char_traits@D@std@@@std@@@std@@2V0locale@2@A DQ 01H DUP (?) ; std::num_put<char,std::ostreambuf_iterator<char,std::char_traits<char> > >::id
_BSS	ENDS
;	COMDAT ?id@?$numpunct@D@std@@2V0locale@2@A
_BSS	SEGMENT
?id@?$numpunct@D@std@@2V0locale@2@A DQ 01H DUP (?)	; std::numpunct<char>::id
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?sliding_attacks_rank_file@@YA_NHHAEBVPosition@@@Z DD imagerel $LN82
	DD	imagerel $LN82+277
	DD	imagerel $unwind$?sliding_attacks_rank_file@@YA_NHHAEBVPosition@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?sliding_attacks_diagonal@@YA_NHHAEBVPosition@@@Z DD imagerel $LN92
	DD	imagerel $LN92+293
	DD	imagerel $unwind$?sliding_attacks_diagonal@@YA_NHHAEBVPosition@@@Z
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$?SqAttacked@@YA_NHAEBVPosition@@W4Color@@@Z DD imagerel $LN911
	DD	imagerel $LN911+2256
	DD	imagerel $unwind$?SqAttacked@@YA_NHAEBVPosition@@W4Color@@@Z
pdata	ENDS
;	COMDAT __xmm@ffffffff00000001fffffff60000000a
CONST	SEGMENT
__xmm@ffffffff00000001fffffff60000000a DB 0aH, 00H, 00H, 00H, 0f6H, 0ffH, 0ffH
	DB	0ffH, 01H, 00H, 00H, 00H, 0ffH, 0ffH, 0ffH, 0ffH
CONST	ENDS
;	COMDAT __xmm@fffffff5fffffff7000000090000000b
CONST	SEGMENT
__xmm@fffffff5fffffff7000000090000000b DB 0bH, 00H, 00H, 00H, 09H, 00H, 00H
	DB	00H, 0f7H, 0ffH, 0ffH, 0ffH, 0f5H, 0ffH, 0ffH, 0ffH
CONST	ENDS
;	COMDAT ?FILE_RANK_LOOKUPS@@3UFileRankLookups@@B
CONST	SEGMENT
?FILE_RANK_LOOKUPS@@3UFileRankLookups@@B DB 0ffH	; FILE_RANK_LOOKUPS
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	01H
	DB	02H
	DB	03H
	DB	04H
	DB	05H
	DB	06H
	DB	07H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	0ffH
	DB	0ffH
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	0ffH
	DB	0ffH
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	02H
	DB	0ffH
	DB	0ffH
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	03H
	DB	0ffH
	DB	0ffH
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	04H
	DB	0ffH
	DB	0ffH
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	05H
	DB	0ffH
	DB	0ffH
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	06H
	DB	0ffH
	DB	0ffH
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	07H
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	0ffH
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
CONST	ENDS
;	COMDAT ?KING_DELTAS@@3V?$array@H$07@std@@B
CONST	SEGMENT
?KING_DELTAS@@3V?$array@H$07@std@@B DD 0aH		; KING_DELTAS
	DD	0fffffff6H
	DD	01H
	DD	0ffffffffH
	DD	0bH
	DD	09H
	DD	0fffffff7H
	DD	0fffffff5H
CONST	ENDS
;	COMDAT ?KNIGHT_DELTAS@@3QBHB
CONST	SEGMENT
?KNIGHT_DELTAS@@3QBHB DD 015H				; KNIGHT_DELTAS
	DD	013H
	DD	0cH
	DD	08H
	DD	0fffffff8H
	DD	0fffffff4H
	DD	0ffffffedH
	DD	0ffffffebH
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?SqAttacked@@YA_NHAEBVPosition@@W4Color@@@Z DD 0a1401H
	DD	0f3414H
	DD	0f0105214H
	DD	0d00ce00eH
	DD	07008c00aH
	DD	050066007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?sliding_attacks_diagonal@@YA_NHHAEBVPosition@@@Z DD 040a01H
	DD	02740aH
	DD	013405H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$?sliding_attacks_rank_file@@YA_NHHAEBVPosition@@@Z DD 040a01H
	DD	03740aH
	DD	023405H
xdata	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??$?0$0A@@id@locale@std@@QEAA@XZ
_TEXT	SEGMENT
this$ = 8
??$?0$0A@@id@locale@std@@QEAA@XZ PROC			; std::locale::id::id<0>, COMDAT
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\xlocale
; Line 108
	mov	QWORD PTR [rcx], 0
	mov	rax, rcx
	ret	0
??$?0$0A@@id@locale@std@@QEAA@XZ ENDP			; std::locale::id::id<0>
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?SqAttacked@@YA_NHAEBVPosition@@W4Color@@@Z
_TEXT	SEGMENT
tv3790 = 0
tv2416 = 8
rank_file_dirs$1 = 16
diagonal_dirs$2 = 32
sq$ = 112
pos$ = 120
attacking_color$ = 128
$T3 = 136
?SqAttacked@@YA_NHAEBVPosition@@W4Color@@@Z PROC	; SqAttacked, COMDAT
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.cpp
; Line 4
$LN911:
	mov	QWORD PTR [rsp+16], rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 48					; 00000030H
	movsxd	r9, ecx
	mov	r14, rdx
	movzx	r13d, r8b
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\board120.hpp
; Line 91
	cmp	r9d, -1
	je	$LN39@SqAttacked
	cmp	r9d, 119				; 00000077H
	ja	$LN39@SqAttacked
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\array
; Line 543
	lea	rdi, OFFSET FLAT:?FILE_RANK_LOOKUPS@@3UFileRankLookups@@B ; FILE_RANK_LOOKUPS
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.cpp
; Line 5
	cmp	BYTE PTR [r9+rdi+240], 0
	je	$LN39@SqAttacked
; Line 12
	xor	ebx, ebx
	lea	rax, QWORD PTR [r14+776]
	imul	rdx, r13, 28
	mov	r11d, r13d
	mov	QWORD PTR $T3[rsp], rbx
	add	rax, rdx
	mov	ecx, ebx
$LL4@SqAttacked:
; Line 13
	cmp	DWORD PTR [rax], ebx
	jg	$LN43@SqAttacked
; Line 12
	inc	rcx
	add	rax, 4
	cmp	rcx, 7
	jl	SHORT $LL4@SqAttacked
; Line 23
	xor	dl, dl
	lea	r8, OFFSET FLAT:?FILE_RANK_LOOKUPS@@3UFileRankLookups@@B+240
	mov	r11d, 1
	npad	7
$LL7@SqAttacked:
; Line 24
	test	dl, dl
	jne	SHORT $LN739@SqAttacked
; Line 25
	cmp	BYTE PTR [r8], dl
	je	SHORT $LN5@SqAttacked
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\position.hpp
; Line 178
	mov	eax, ebx
	movzx	ecx, BYTE PTR [rax+r14]
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.cpp
; Line 27
	test	cl, cl
	je	SHORT $LN5@SqAttacked
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\chess_types.hpp
; Line 122
	cmp	cl, 255					; 000000ffH
	je	SHORT $LN601@SqAttacked
	shr	cl, 3
	and	cl, r11b
	jmp	SHORT $LN602@SqAttacked
$LN601@SqAttacked:
	mov	cl, 2
$LN602@SqAttacked:
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.cpp
; Line 27
	cmp	cl, r13b
	movzx	edx, dl
	cmove	edx, r11d
$LN5@SqAttacked:
; Line 24
	inc	ebx
	inc	r8
	cmp	ebx, 120				; 00000078H
	jl	SHORT $LL7@SqAttacked
; Line 34
	test	dl, dl
	je	$LN39@SqAttacked
$LN739@SqAttacked:
; Line 37
	test	r13b, r13b
	jne	SHORT $LN47@SqAttacked
; Line 40
	lea	eax, DWORD PTR [r9-9]
; Line 41
	lea	ecx, DWORD PTR [r9-11]
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\board120.hpp
; Line 91
	cmp	eax, -1
	je	SHORT $LN50@SqAttacked
	cmp	eax, 119				; 00000077H
	ja	SHORT $LN50@SqAttacked
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.cpp
; Line 43
	cmp	BYTE PTR [r9+rdi+231], r13b
	je	SHORT $LN50@SqAttacked
; Line 45
	cmp	BYTE PTR [r9+r14-9], r11b
	je	$LN650@SqAttacked
$LN50@SqAttacked:
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\board120.hpp
; Line 91
	cmp	r9d, 10
	je	SHORT $LN56@SqAttacked
	cmp	ecx, 119				; 00000077H
	ja	SHORT $LN56@SqAttacked
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.cpp
; Line 47
	cmp	BYTE PTR [r9+rdi+229], 0
	je	SHORT $LN56@SqAttacked
; Line 49
	cmp	BYTE PTR [r9+r14-11], r11b
	jmp	SHORT $LN897@SqAttacked
$LN47@SqAttacked:
; Line 54
	lea	eax, DWORD PTR [r9+9]
; Line 55
	lea	ecx, DWORD PTR [r9+11]
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\board120.hpp
; Line 91
	cmp	eax, -1
	je	SHORT $LN54@SqAttacked
	cmp	eax, 119				; 00000077H
	ja	SHORT $LN54@SqAttacked
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.cpp
; Line 57
	cmp	BYTE PTR [r9+rdi+249], 0
	je	SHORT $LN54@SqAttacked
; Line 59
	cmp	BYTE PTR [r9+r14+9], 9
	je	$LN650@SqAttacked
$LN54@SqAttacked:
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\board120.hpp
; Line 91
	cmp	r9d, -12
	je	SHORT $LN56@SqAttacked
	cmp	ecx, 119				; 00000077H
	ja	SHORT $LN56@SqAttacked
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.cpp
; Line 61
	cmp	BYTE PTR [r9+rdi+251], 0
	je	SHORT $LN56@SqAttacked
; Line 63
	cmp	BYTE PTR [r9+r14+11], 9
$LN897@SqAttacked:
; Line 68
	je	$LN650@SqAttacked
$LN56@SqAttacked:
	lea	r8, OFFSET FLAT:?KNIGHT_DELTAS@@3QBHB	; KNIGHT_DELTAS
	lea	r10, OFFSET FLAT:?KNIGHT_DELTAS@@3QBHB+32
$LL10@SqAttacked:
; Line 69
	mov	ecx, DWORD PTR [r8]
	add	ecx, r9d
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\board120.hpp
; Line 91
	cmp	ecx, -1
	je	SHORT $LN8@SqAttacked
	cmp	ecx, 119				; 00000077H
	ja	SHORT $LN8@SqAttacked
; Line 92
	movsxd	rcx, ecx
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.cpp
; Line 70
	cmp	BYTE PTR [rcx+rdi+240], 0
	je	SHORT $LN8@SqAttacked
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\position.hpp
; Line 178
	movzx	ecx, BYTE PTR [rcx+r14]
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\chess_types.hpp
; Line 119
	test	cl, cl
	je	SHORT $LN8@SqAttacked
	cmp	cl, 255					; 000000ffH
	je	SHORT $LN8@SqAttacked
	movzx	eax, cl
	and	al, 7
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.cpp
; Line 72
	cmp	al, 2
	jne	SHORT $LN8@SqAttacked
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\chess_types.hpp
; Line 122
	shr	cl, 3
	and	cl, r11b
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.cpp
; Line 72
	cmp	cl, r13b
	je	$LN650@SqAttacked
$LN8@SqAttacked:
; Line 68
	add	r8, 4
	cmp	r8, r10
	jne	SHORT $LL10@SqAttacked
; Line 79
	lea	rdx, OFFSET FLAT:?KING_DELTAS@@3V?$array@H$07@std@@B ; KING_DELTAS
	lea	r8, OFFSET FLAT:?KING_DELTAS@@3V?$array@H$07@std@@B+32
	npad	5
$LL13@SqAttacked:
; Line 80
	mov	ecx, DWORD PTR [rdx]
	add	ecx, r9d
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\board120.hpp
; Line 91
	cmp	ecx, -1
	je	SHORT $LN11@SqAttacked
	cmp	ecx, 119				; 00000077H
	ja	SHORT $LN11@SqAttacked
; Line 92
	movsxd	rcx, ecx
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.cpp
; Line 81
	cmp	BYTE PTR [rcx+rdi+240], 0
	je	SHORT $LN11@SqAttacked
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\position.hpp
; Line 178
	movzx	ecx, BYTE PTR [rcx+r14]
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\chess_types.hpp
; Line 119
	test	cl, cl
	je	SHORT $LN11@SqAttacked
	cmp	cl, 255					; 000000ffH
	je	SHORT $LN11@SqAttacked
	movzx	eax, cl
	and	al, 7
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.cpp
; Line 83
	cmp	al, 6
	jne	SHORT $LN11@SqAttacked
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\chess_types.hpp
; Line 122
	shr	cl, 3
	and	cl, r11b
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.cpp
; Line 83
	cmp	cl, r13b
	je	$LN650@SqAttacked
$LN11@SqAttacked:
; Line 79
	add	rdx, 4
	cmp	rdx, r8
	jne	SHORT $LL13@SqAttacked
; Line 90
	movdqa	xmm0, XMMWORD PTR __xmm@ffffffff00000001fffffff60000000a
; Line 91
	lea	r8, QWORD PTR rank_file_dirs$1[rsp]
	movdqu	XMMWORD PTR rank_file_dirs$1[rsp], xmm0
	mov	r10d, 10
$LL16@SqAttacked:
; Line 92
	mov	edx, r11d
	lea	eax, DWORD PTR [r10+r9]
	npad	5
$LL19@SqAttacked:
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\board120.hpp
; Line 91
	cmp	eax, -1
	je	SHORT $LN14@SqAttacked
	cmp	eax, 119				; 00000077H
	ja	SHORT $LN14@SqAttacked
; Line 92
	movsxd	rcx, eax
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.cpp
; Line 94
	cmp	BYTE PTR [rcx+rdi+240], 0
	je	SHORT $LN14@SqAttacked
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\position.hpp
; Line 178
	movzx	ecx, BYTE PTR [r14+rcx]
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.cpp
; Line 97
	test	cl, cl
	jne	SHORT $LN637@SqAttacked
; Line 92
	inc	edx
	add	eax, r10d
	cmp	edx, 8
	jl	SHORT $LL19@SqAttacked
	jmp	SHORT $LN14@SqAttacked
$LN637@SqAttacked:
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\chess_types.hpp
; Line 122
	cmp	cl, 255					; 000000ffH
	je	SHORT $LN318@SqAttacked
	movzx	eax, cl
	shr	al, 3
	and	al, r11b
	jmp	SHORT $LN319@SqAttacked
$LN318@SqAttacked:
	mov	al, 2
$LN319@SqAttacked:
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.cpp
; Line 99
	cmp	al, r13b
	jne	SHORT $LN14@SqAttacked
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\chess_types.hpp
; Line 119
	cmp	cl, 255					; 000000ffH
	je	SHORT $LN14@SqAttacked
	and	cl, 7
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.cpp
; Line 101
	sub	cl, 4
	cmp	cl, r11b
	jbe	$LN650@SqAttacked
$LN14@SqAttacked:
; Line 91
	add	r8, 4
	lea	rax, QWORD PTR rank_file_dirs$1[rsp+16]
	cmp	r8, rax
	je	SHORT $LN672@SqAttacked
	mov	r10d, DWORD PTR [r8]
	jmp	SHORT $LL16@SqAttacked
$LN672@SqAttacked:
; Line 111
	movdqa	xmm0, XMMWORD PTR __xmm@fffffff5fffffff7000000090000000b
; Line 112
	lea	r8, QWORD PTR diagonal_dirs$2[rsp]
	movdqu	XMMWORD PTR diagonal_dirs$2[rsp], xmm0
	mov	r12d, 11
$LL22@SqAttacked:
; Line 113
	mov	edx, r11d
	lea	eax, DWORD PTR [r12+r9]
	npad	6
$LL25@SqAttacked:
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\board120.hpp
; Line 91
	cmp	eax, -1
	je	SHORT $LN20@SqAttacked
	cmp	eax, 119				; 00000077H
	ja	SHORT $LN20@SqAttacked
; Line 92
	movsxd	rcx, eax
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.cpp
; Line 115
	cmp	BYTE PTR [rcx+rdi+240], 0
	je	SHORT $LN20@SqAttacked
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\position.hpp
; Line 178
	movzx	ecx, BYTE PTR [r14+rcx]
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.cpp
; Line 118
	test	cl, cl
	jne	SHORT $LN639@SqAttacked
; Line 113
	inc	edx
	add	eax, r12d
	cmp	edx, 8
	jl	SHORT $LL25@SqAttacked
	jmp	SHORT $LN20@SqAttacked
$LN639@SqAttacked:
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\chess_types.hpp
; Line 122
	cmp	cl, 255					; 000000ffH
	je	SHORT $LN159@SqAttacked
	movzx	eax, cl
	shr	al, 3
	and	al, r11b
	jmp	SHORT $LN160@SqAttacked
$LN159@SqAttacked:
	mov	al, 2
$LN160@SqAttacked:
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.cpp
; Line 120
	cmp	al, r13b
	jne	SHORT $LN20@SqAttacked
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\chess_types.hpp
; Line 119
	cmp	cl, 255					; 000000ffH
	je	SHORT $LN20@SqAttacked
	and	cl, 7
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.cpp
; Line 122
	sub	cl, 3
	test	cl, 253					; 000000fdH
	je	$LN650@SqAttacked
$LN20@SqAttacked:
; Line 112
	add	r8, 4
	lea	rax, QWORD PTR diagonal_dirs$2[rsp+16]
	cmp	r8, rax
	je	$LN39@SqAttacked
	mov	r12d, DWORD PTR [r8]
	jmp	SHORT $LL22@SqAttacked
$LN43@SqAttacked:
; Line 142
	movsxd	r10, DWORD PTR [rdx+r14+780]
	test	r10, r10
	jle	SHORT $LN759@SqAttacked
	imul	rdx, r11, 280				; 00000118H
	mov	r8, rbx
	add	rdx, 256				; 00000100H
	add	rdx, r14
	npad	1
$LL28@SqAttacked:
; Line 143
	mov	ecx, DWORD PTR [rdx]
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.hpp
; Line 8
	test	r13b, r13b
	jne	SHORT $LN497@SqAttacked
; Line 10
	lea	eax, DWORD PTR [rcx+11]
	cmp	r9d, eax
	je	$LN650@SqAttacked
	lea	eax, DWORD PTR [rcx+9]
	jmp	SHORT $LN899@SqAttacked
$LN497@SqAttacked:
; Line 13
	lea	eax, DWORD PTR [rcx-9]
	cmp	r9d, eax
	je	$LN650@SqAttacked
	lea	eax, DWORD PTR [rcx-11]
$LN899@SqAttacked:
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.cpp
; Line 142
	cmp	r9d, eax
	je	$LN650@SqAttacked
	inc	r8
	add	rdx, 4
	cmp	r8, r10
	jl	SHORT $LL28@SqAttacked
$LN759@SqAttacked:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\array
; Line 543
	lea	rax, QWORD PTR [r13+28]
	imul	rcx, rax, 28
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.cpp
; Line 151
	movsxd	rsi, DWORD PTR [rcx+r14]
	test	rsi, rsi
	jle	SHORT $LN30@SqAttacked
	imul	rdi, r11, 280				; 00000118H
	lea	r8, OFFSET FLAT:?KNIGHT_DELTAS@@3QBHB	; KNIGHT_DELTAS
	add	rdi, 296				; 00000128H
	lea	r10, OFFSET FLAT:?KNIGHT_DELTAS@@3QBHB+32
	add	rdi, r14
	npad	4
$LL31@SqAttacked:
; Line 152
	mov	r11d, DWORD PTR [rdi]
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.hpp
; Line 19
	mov	rdx, r8
	npad	10
$LL433@SqAttacked:
; Line 20
	mov	ecx, DWORD PTR [rdx]
	add	ecx, r11d
	cmp	ecx, r9d
	je	$LN650@SqAttacked
; Line 19
	add	rdx, 4
	cmp	rdx, r10
	jne	SHORT $LL433@SqAttacked
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.cpp
; Line 151
	inc	rbx
	add	rdi, 4
	cmp	rbx, rsi
	jl	SHORT $LL31@SqAttacked
	mov	r11, r13
	lea	rdi, OFFSET FLAT:?FILE_RANK_LOOKUPS@@3UFileRankLookups@@B ; FILE_RANK_LOOKUPS
	xor	ebx, ebx
$LN30@SqAttacked:
; Line 159
	mov	r10d, DWORD PTR [r14+r11*4+136]
	test	r10d, r10d
	js	SHORT $LN74@SqAttacked
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.hpp
; Line 29
	lea	rdx, OFFSET FLAT:?KING_DELTAS@@3V?$array@H$07@std@@B ; KING_DELTAS
	lea	r8, OFFSET FLAT:?KING_DELTAS@@3V?$array@H$07@std@@B+32
	npad	6
$LL456@SqAttacked:
; Line 30
	mov	ecx, DWORD PTR [rdx]
	add	ecx, r10d
	cmp	ecx, r9d
	je	$LN650@SqAttacked
; Line 29
	add	rdx, 4
	cmp	rdx, r8
	jne	SHORT $LL456@SqAttacked
$LN74@SqAttacked:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\array
; Line 543
	imul	rax, r11, 28
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.cpp
; Line 166
	mov	r15, r9
; Line 167
	mov	r10d, 10
	movsxd	rcx, DWORD PTR [rax+r14+792]
	test	ecx, ecx
	jle	$LN712@SqAttacked
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\board120.hpp
; Line 82
	movzx	esi, BYTE PTR [r9+rdi]
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.cpp
; Line 167
	mov	r12, rcx
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\board120.hpp
; Line 86
	movzx	ebp, BYTE PTR [r9+rdi+120]
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\array
; Line 543
	imul	rdi, r11, 280				; 00000118H
	add	rdi, 376				; 00000178H
	add	rdi, r14
$LL34@SqAttacked:
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.cpp
; Line 168
	movsxd	rax, DWORD PTR [rdi]
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\board120.hpp
; Line 81
	cmp	eax, -1
	je	SHORT $LN348@SqAttacked
	cmp	eax, 119				; 00000077H
	ja	SHORT $LN348@SqAttacked
; Line 82
	mov	r8, rax
	lea	rcx, OFFSET FLAT:?FILE_RANK_LOOKUPS@@3UFileRankLookups@@B ; FILE_RANK_LOOKUPS
	movzx	ecx, BYTE PTR [rax+rcx]
; Line 86
	lea	rdx, OFFSET FLAT:?FILE_RANK_LOOKUPS@@3UFileRankLookups@@B ; FILE_RANK_LOOKUPS
	movzx	r8d, BYTE PTR [rax+rdx+120]
	jmp	SHORT $LN353@SqAttacked
$LN348@SqAttacked:
; Line 81
	mov	r8, rax
	mov	cl, 255					; 000000ffH
; Line 85
	cmp	eax, -1
	je	SHORT $LN355@SqAttacked
	cmp	eax, 119				; 00000077H
	ja	SHORT $LN355@SqAttacked
; Line 86
	lea	rdx, OFFSET FLAT:?FILE_RANK_LOOKUPS@@3UFileRankLookups@@B ; FILE_RANK_LOOKUPS
	movzx	r8d, BYTE PTR [rax+rdx+120]
	jmp	SHORT $LN353@SqAttacked
$LN355@SqAttacked:
; Line 85
	mov	r8b, 255				; 000000ffH
$LN353@SqAttacked:
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.hpp
; Line 45
	cmp	cl, sil
	je	SHORT $LN736@SqAttacked
	cmp	r8b, bpl
	jne	SHORT $LN747@SqAttacked
; Line 56
	cmp	sil, cl
	mov	edx, -1
	mov	ecx, 1
	cmova	edx, ecx
	jmp	SHORT $LN343@SqAttacked
$LN736@SqAttacked:
; Line 53
	cmp	bpl, r8b
	mov	edx, -10
	cmova	edx, r10d
$LN343@SqAttacked:
; Line 60
	lea	ecx, DWORD PTR [rdx+rax]
; Line 61
	cmp	ecx, r9d
	je	$LN650@SqAttacked
	lea	r8, OFFSET FLAT:?FILE_RANK_LOOKUPS@@3UFileRankLookups@@B ; FILE_RANK_LOOKUPS
	movsxd	rax, ecx
	add	r8, 240					; 000000f0H
	movsxd	r11, edx
	add	r8, rax
	mov	r10d, ecx
	npad	4
$LL339@SqAttacked:
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\board120.hpp
; Line 91
	cmp	ecx, -1
	je	SHORT $LN747@SqAttacked
	cmp	r10d, 119				; 00000077H
	ja	SHORT $LN340@SqAttacked
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.hpp
; Line 61
	cmp	BYTE PTR [r8], 0
	je	SHORT $LN340@SqAttacked
	movsxd	rax, ecx
; Line 62
	cmp	BYTE PTR [r14+rax], 0
	jne	SHORT $LN747@SqAttacked
; Line 65
	add	ecx, edx
	add	r10d, edx
	add	r8, r11
	cmp	ecx, r9d
	jne	SHORT $LL339@SqAttacked
$LN340@SqAttacked:
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.cpp
; Line 169
	cmp	ecx, r9d
	je	$LN650@SqAttacked
$LN747@SqAttacked:
; Line 167
	inc	rbx
	add	rdi, 4
	mov	r10d, 10
	cmp	rbx, r12
	jl	$LL34@SqAttacked
; Line 187
	mov	r11, r13
$LN712@SqAttacked:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\array
; Line 543
	imul	rax, r11, 28
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.cpp
; Line 176
	mov	r12d, 11
	movsxd	rcx, DWORD PTR [rax+r14+788]
	test	ecx, ecx
	jle	$LN36@SqAttacked
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\array
; Line 543
	imul	rbx, r13, 280				; 00000118H
	lea	r8, OFFSET FLAT:?FILE_RANK_LOOKUPS@@3UFileRankLookups@@B ; FILE_RANK_LOOKUPS
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.cpp
; Line 176
	xor	edi, edi
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\array
; Line 543
	movzx	esi, BYTE PTR [r9+r8]
	add	rbx, 336				; 00000150H
	movzx	r15d, BYTE PTR [r9+r8+120]
	add	rbx, r14
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.cpp
; Line 176
	mov	rbp, rcx
	npad	4
$LL37@SqAttacked:
; Line 177
	movsxd	r10, DWORD PTR [rbx]
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\board120.hpp
; Line 81
	cmp	r10d, -1
	je	SHORT $LN275@SqAttacked
	cmp	r10d, 119				; 00000077H
	ja	SHORT $LN275@SqAttacked
; Line 82
	movzx	ecx, BYTE PTR [r10+r8]
	mov	edx, esi
	sub	edx, ecx
; Line 86
	movzx	ecx, BYTE PTR [r10+r8+120]
	jmp	SHORT $LN287@SqAttacked
$LN275@SqAttacked:
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.hpp
; Line 74
	lea	edx, DWORD PTR [rsi-255]
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\board120.hpp
; Line 85
	cmp	r10d, -1
	je	SHORT $LN289@SqAttacked
	cmp	r10d, 119				; 00000077H
	ja	SHORT $LN289@SqAttacked
; Line 86
	movzx	ecx, BYTE PTR [r10+r8+120]
	jmp	SHORT $LN287@SqAttacked
$LN289@SqAttacked:
; Line 85
	mov	cl, 255					; 000000ffH
$LN287@SqAttacked:
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.hpp
; Line 75
	movzx	eax, cl
	mov	r8d, r15d
	sub	r8d, eax
; Line 77
	mov	ecx, edx
	neg	ecx
	mov	eax, r8d
	cmovs	ecx, edx
	neg	eax
	cmovs	eax, r8d
	cmp	ecx, eax
	jne	$LN748@SqAttacked
; Line 83
	test	edx, edx
	jle	SHORT $LN901@SqAttacked
	test	r8d, r8d
	jle	SHORT $LN902@SqAttacked
	mov	edx, r12d
	jmp	SHORT $LN263@SqAttacked
$LN902@SqAttacked:
; Line 85
	jns	SHORT $LN262@SqAttacked
	mov	edx, -9
	jmp	SHORT $LN263@SqAttacked
$LN901@SqAttacked:
; Line 84
	jns	SHORT $LN262@SqAttacked
	mov	edx, 9
	test	r8d, r8d
	jg	SHORT $LN263@SqAttacked
$LN262@SqAttacked:
; Line 86
	mov	edx, -11
$LN263@SqAttacked:
; Line 89
	lea	ecx, DWORD PTR [rdx+r10]
; Line 90
	cmp	ecx, r9d
	je	$LN650@SqAttacked
	lea	r8, OFFSET FLAT:?FILE_RANK_LOOKUPS@@3UFileRankLookups@@B ; FILE_RANK_LOOKUPS
	movsxd	rax, ecx
	add	r8, 240					; 000000f0H
	movsxd	r11, edx
	add	r8, rax
	mov	r10d, ecx
	npad	4
$LL255@SqAttacked:
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\board120.hpp
; Line 91
	cmp	ecx, -1
	je	SHORT $LN748@SqAttacked
	cmp	r10d, 119				; 00000077H
	ja	SHORT $LN256@SqAttacked
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.hpp
; Line 90
	cmp	BYTE PTR [r8], 0
	je	SHORT $LN256@SqAttacked
	movsxd	rax, ecx
; Line 91
	cmp	BYTE PTR [r14+rax], 0
	jne	SHORT $LN748@SqAttacked
; Line 94
	add	ecx, edx
	add	r10d, edx
	add	r8, r11
	cmp	ecx, r9d
	jne	SHORT $LL255@SqAttacked
$LN256@SqAttacked:
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.cpp
; Line 178
	cmp	ecx, r9d
	je	$LN650@SqAttacked
$LN748@SqAttacked:
; Line 176
	inc	rdi
	lea	r8, OFFSET FLAT:?FILE_RANK_LOOKUPS@@3UFileRankLookups@@B ; FILE_RANK_LOOKUPS
	add	rbx, 4
	cmp	rdi, rbp
	jl	$LL37@SqAttacked
; Line 187
	mov	r15, r9
	mov	r11, r13
$LN36@SqAttacked:
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\array
; Line 543
	imul	rcx, r13, 28
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.cpp
; Line 184
	movsxd	rax, DWORD PTR [rcx+r14+796]
; Line 185
	test	eax, eax
	jle	$LN39@SqAttacked
	imul	rsi, r11, 280				; 00000118H
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\board120.hpp
; Line 82
	lea	rdi, OFFSET FLAT:?FILE_RANK_LOOKUPS@@3UFileRankLookups@@B ; FILE_RANK_LOOKUPS
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.cpp
; Line 185
	mov	QWORD PTR tv3790[rsp], rax
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\board120.hpp
; Line 82
	movzx	ebp, BYTE PTR [r15+rdi]
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.cpp
; Line 185
	add	rsi, 416				; 000001a0H
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\board120.hpp
; Line 86
	movzx	r13d, BYTE PTR [r9+rdi+120]
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.cpp
; Line 185
	add	rsi, r14
	npad	7
$LL40@SqAttacked:
; Line 186
	movsxd	r11, DWORD PTR [rsi]
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\board120.hpp
; Line 81
	cmp	r11d, -1
	je	SHORT $LN106@SqAttacked
	cmp	r11d, 119				; 00000077H
	ja	SHORT $LN106@SqAttacked
; Line 82
	movzx	eax, BYTE PTR [r11+rdi]
	mov	rbx, r11
; Line 86
	movzx	ecx, BYTE PTR [rbx+rdi+120]
	jmp	SHORT $LN111@SqAttacked
$LN106@SqAttacked:
; Line 81
	mov	rbx, r11
	mov	al, 255					; 000000ffH
; Line 85
	cmp	r11d, -1
	je	SHORT $LN113@SqAttacked
	cmp	r11d, 119				; 00000077H
	ja	SHORT $LN113@SqAttacked
; Line 86
	movzx	ecx, BYTE PTR [rbx+rdi+120]
	jmp	SHORT $LN111@SqAttacked
$LN113@SqAttacked:
; Line 85
	mov	cl, 255					; 000000ffH
$LN111@SqAttacked:
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.hpp
; Line 45
	cmp	al, bpl
	je	SHORT $LN735@SqAttacked
	cmp	cl, r13b
	jne	$LN749@SqAttacked
; Line 56
	cmp	bpl, al
	mov	edx, -1
	mov	eax, 1
	jmp	SHORT $LN904@SqAttacked
$LN735@SqAttacked:
; Line 53
	mov	edx, -10
	cmp	r13b, cl
	mov	eax, 10
$LN904@SqAttacked:
; Line 60
	cmova	edx, eax
	lea	ecx, DWORD PTR [rdx+r11]
; Line 61
	cmp	ecx, r9d
	je	SHORT $LN650@SqAttacked
	lea	r8, OFFSET FLAT:?FILE_RANK_LOOKUPS@@3UFileRankLookups@@B ; FILE_RANK_LOOKUPS
	movsxd	rax, ecx
	add	r8, 240					; 000000f0H
	movsxd	rdi, edx
	add	r8, rax
	mov	r10d, ecx
$LL97@SqAttacked:
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\board120.hpp
; Line 91
	cmp	ecx, -1
	je	SHORT $LN777@SqAttacked
	cmp	r10d, 119				; 00000077H
	ja	SHORT $LN779@SqAttacked
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.hpp
; Line 61
	cmp	BYTE PTR [r8], 0
	je	SHORT $LN779@SqAttacked
	movsxd	rax, ecx
; Line 62
	cmp	BYTE PTR [r14+rax], 0
	jne	SHORT $LN777@SqAttacked
; Line 65
	add	ecx, edx
	add	r10d, edx
	add	r8, rdi
	cmp	ecx, r9d
	jne	SHORT $LL97@SqAttacked
$LN779@SqAttacked:
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.cpp
; Line 187
	lea	rdi, OFFSET FLAT:?FILE_RANK_LOOKUPS@@3UFileRankLookups@@B ; FILE_RANK_LOOKUPS
	cmp	ecx, r9d
	jne	SHORT $LN749@SqAttacked
$LN650@SqAttacked:
; Line 189
	mov	al, 1
	jmp	$LN1@SqAttacked
$LN777@SqAttacked:
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\board120.hpp
; Line 82
	lea	rdi, OFFSET FLAT:?FILE_RANK_LOOKUPS@@3UFileRankLookups@@B ; FILE_RANK_LOOKUPS
$LN749@SqAttacked:
	movzx	ecx, BYTE PTR [r9+rdi]
; Line 81
	cmp	r11d, -1
	je	SHORT $LN193@SqAttacked
	cmp	r11d, 119				; 00000077H
	ja	SHORT $LN193@SqAttacked
; Line 82
	movzx	eax, BYTE PTR [rbx+rdi]
	mov	edx, ecx
	movzx	ecx, BYTE PTR [r9+rdi+120]
	sub	edx, eax
; Line 86
	movzx	eax, BYTE PTR [rbx+rdi+120]
	jmp	SHORT $LN205@SqAttacked
$LN193@SqAttacked:
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.hpp
; Line 74
	lea	edx, DWORD PTR [rcx-255]
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\board120.hpp
; Line 86
	movzx	ecx, BYTE PTR [r9+rdi+120]
; Line 85
	cmp	r11d, -1
	je	SHORT $LN207@SqAttacked
	cmp	r11d, 119				; 00000077H
	ja	SHORT $LN207@SqAttacked
; Line 86
	movzx	eax, BYTE PTR [rbx+rdi+120]
	jmp	SHORT $LN205@SqAttacked
$LN207@SqAttacked:
; Line 85
	mov	al, 255					; 000000ffH
$LN205@SqAttacked:
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.hpp
; Line 75
	movzx	eax, al
	movzx	r8d, cl
	sub	r8d, eax
; Line 77
	mov	eax, edx
	mov	ecx, r8d
	neg	ecx
	cmovs	ecx, r8d
	neg	eax
	cmovs	eax, edx
	cmp	eax, ecx
	jne	SHORT $LN750@SqAttacked
; Line 83
	test	edx, edx
	jle	SHORT $LN906@SqAttacked
	test	r8d, r8d
	jle	SHORT $LN907@SqAttacked
	mov	edx, r12d
	jmp	SHORT $LN181@SqAttacked
$LN907@SqAttacked:
; Line 85
	jns	SHORT $LN180@SqAttacked
	mov	edx, -9
	jmp	SHORT $LN181@SqAttacked
$LN906@SqAttacked:
; Line 84
	jns	SHORT $LN180@SqAttacked
	mov	edx, 9
	test	r8d, r8d
	jg	SHORT $LN181@SqAttacked
$LN180@SqAttacked:
; Line 86
	mov	edx, -11
$LN181@SqAttacked:
; Line 89
	lea	ecx, DWORD PTR [rdx+r11]
; Line 90
	cmp	ecx, r9d
	je	$LN650@SqAttacked
	movsxd	r8, ecx
	mov	r10d, ecx
	add	r8, 240					; 000000f0H
	movsxd	r11, edx
	add	r8, rdi
$LL173@SqAttacked:
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\board120.hpp
; Line 91
	cmp	ecx, -1
	je	SHORT $LN750@SqAttacked
	cmp	r10d, 119				; 00000077H
	ja	SHORT $LN174@SqAttacked
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.hpp
; Line 90
	cmp	BYTE PTR [r8], 0
	je	SHORT $LN174@SqAttacked
	movsxd	rax, ecx
; Line 91
	cmp	BYTE PTR [r14+rax], 0
	jne	SHORT $LN750@SqAttacked
; Line 94
	add	ecx, edx
	add	r10d, edx
	add	r8, r11
	cmp	ecx, r9d
	jne	SHORT $LL173@SqAttacked
$LN174@SqAttacked:
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.cpp
; Line 187
	cmp	ecx, r9d
	je	$LN650@SqAttacked
$LN750@SqAttacked:
; Line 185
	mov	rax, QWORD PTR $T3[rsp]
	add	rsi, 4
	inc	rax
	mov	QWORD PTR $T3[rsp], rax
	cmp	rax, QWORD PTR tv3790[rsp]
	jl	$LL40@SqAttacked
$LN39@SqAttacked:
; Line 193
	xor	al, al
$LN1@SqAttacked:
; Line 194
	mov	rbx, QWORD PTR [rsp+120]
	add	rsp, 48					; 00000030H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
?SqAttacked@@YA_NHAEBVPosition@@W4Color@@@Z ENDP	; SqAttacked
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?sliding_attacks_diagonal@@YA_NHHAEBVPosition@@@Z
_TEXT	SEGMENT
piece_sq$ = 8
target_sq$ = 16
pos$ = 24
?sliding_attacks_diagonal@@YA_NHHAEBVPosition@@@Z PROC	; sliding_attacks_diagonal, COMDAT
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.hpp
; Line 72
$LN92:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rdi
	movsxd	r10, edx
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\board120.hpp
; Line 81
	lea	rdi, OFFSET FLAT:?FILE_RANK_LOOKUPS@@3UFileRankLookups@@B ; FILE_RANK_LOOKUPS
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.hpp
; Line 72
	movsxd	r9, ecx
	mov	rbx, r8
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\board120.hpp
; Line 81
	cmp	r10d, -1
	je	SHORT $LN15@sliding_at
	cmp	r10d, 119				; 00000077H
	ja	SHORT $LN15@sliding_at
; Line 82
	movzx	edx, BYTE PTR [r10+rdi]
	jmp	SHORT $LN13@sliding_at
$LN15@sliding_at:
; Line 81
	mov	dl, 255					; 000000ffH
$LN13@sliding_at:
	cmp	r9d, -1
	je	SHORT $LN64@sliding_at
	cmp	r9d, 119				; 00000077H
	ja	SHORT $LN64@sliding_at
; Line 82
	movzx	ecx, BYTE PTR [r9+rdi]
	jmp	SHORT $LN20@sliding_at
$LN64@sliding_at:
; Line 81
	mov	cl, 255					; 000000ffH
$LN20@sliding_at:
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.hpp
; Line 74
	movzx	eax, cl
	movzx	r8d, dl
	sub	r8d, eax
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\board120.hpp
; Line 85
	cmp	r10d, -1
	je	SHORT $LN65@sliding_at
	cmp	r10d, 119				; 00000077H
	ja	SHORT $LN65@sliding_at
; Line 86
	movzx	edx, BYTE PTR [r10+rdi+120]
	jmp	SHORT $LN27@sliding_at
$LN65@sliding_at:
; Line 85
	mov	dl, 255					; 000000ffH
$LN27@sliding_at:
	cmp	r9d, -1
	je	SHORT $LN36@sliding_at
	cmp	r9d, 119				; 00000077H
	ja	SHORT $LN36@sliding_at
; Line 86
	movzx	ecx, BYTE PTR [r9+rdi+120]
	jmp	SHORT $LN34@sliding_at
$LN36@sliding_at:
; Line 85
	mov	cl, 255					; 000000ffH
$LN34@sliding_at:
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.hpp
; Line 75
	movzx	eax, cl
	movzx	edx, dl
	sub	edx, eax
; Line 77
	mov	eax, r8d
	mov	ecx, edx
	neg	ecx
	cmovs	ecx, edx
	neg	eax
	cmovs	eax, r8d
	cmp	eax, ecx
	jne	$LN58@sliding_at
; Line 83
	test	r8d, r8d
	jle	SHORT $LN87@sliding_at
	test	edx, edx
	jle	SHORT $LN88@sliding_at
	mov	edx, 11
	jmp	SHORT $LN10@sliding_at
$LN88@sliding_at:
; Line 85
	jns	SHORT $LN9@sliding_at
	mov	edx, -9
	jmp	SHORT $LN10@sliding_at
$LN87@sliding_at:
; Line 84
	jns	SHORT $LN9@sliding_at
	test	edx, edx
	mov	edx, 9
	jg	SHORT $LN10@sliding_at
$LN9@sliding_at:
; Line 86
	mov	edx, -11
$LN10@sliding_at:
; Line 89
	lea	ecx, DWORD PTR [rdx+r9]
; Line 90
	cmp	ecx, r10d
	je	SHORT $LN89@sliding_at
	movsxd	r8, ecx
	mov	r9d, ecx
	add	r8, 240					; 000000f0H
	movsxd	r11, edx
	add	r8, rdi
	npad	1
$LL2@sliding_at:
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\board120.hpp
; Line 91
	cmp	ecx, -1
	je	SHORT $LN3@sliding_at
	cmp	r9d, 119				; 00000077H
	ja	SHORT $LN3@sliding_at
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.hpp
; Line 90
	cmp	BYTE PTR [r8], 0
	je	SHORT $LN3@sliding_at
	movsxd	rax, ecx
; Line 91
	cmp	BYTE PTR [rax+rbx], 0
	jne	SHORT $LN58@sliding_at
; Line 94
	add	ecx, edx
	add	r9d, edx
	add	r8, r11
	cmp	ecx, r10d
	jne	SHORT $LL2@sliding_at
$LN3@sliding_at:
; Line 97
	cmp	ecx, r10d
$LN89@sliding_at:
	sete	al
; Line 98
	mov	rbx, QWORD PTR [rsp+8]
	mov	rdi, QWORD PTR [rsp+16]
	ret	0
$LN58@sliding_at:
	mov	rbx, QWORD PTR [rsp+8]
	xor	al, al
	mov	rdi, QWORD PTR [rsp+16]
	ret	0
?sliding_attacks_diagonal@@YA_NHHAEBVPosition@@@Z ENDP	; sliding_attacks_diagonal
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?sliding_attacks_rank_file@@YA_NHHAEBVPosition@@@Z
_TEXT	SEGMENT
piece_sq$ = 8
target_sq$ = 16
pos$ = 24
?sliding_attacks_rank_file@@YA_NHHAEBVPosition@@@Z PROC	; sliding_attacks_rank_file, COMDAT
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.hpp
; Line 38
$LN82:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rdi
	movsxd	r10, edx
	mov	rbx, r8
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\board120.hpp
; Line 81
	lea	rdi, OFFSET FLAT:?FILE_RANK_LOOKUPS@@3UFileRankLookups@@B ; FILE_RANK_LOOKUPS
	cmp	ecx, -1
	je	SHORT $LN11@sliding_at
	cmp	ecx, 119				; 00000077H
	ja	SHORT $LN11@sliding_at
; Line 82
	movsxd	rax, ecx
	movzx	r9d, BYTE PTR [rax+rdi]
; Line 86
	movzx	r11d, BYTE PTR [rax+rdi+120]
	jmp	SHORT $LN16@sliding_at
$LN11@sliding_at:
; Line 81
	movsxd	rax, ecx
	mov	r9b, 255				; 000000ffH
; Line 85
	cmp	ecx, -1
	je	SHORT $LN18@sliding_at
	cmp	ecx, 119				; 00000077H
	ja	SHORT $LN18@sliding_at
; Line 86
	movzx	r11d, BYTE PTR [rax+rdi+120]
	jmp	SHORT $LN16@sliding_at
$LN18@sliding_at:
; Line 85
	mov	r11b, 255				; 000000ffH
$LN16@sliding_at:
; Line 81
	cmp	r10d, -1
	je	SHORT $LN25@sliding_at
	cmp	r10d, 119				; 00000077H
	ja	SHORT $LN25@sliding_at
; Line 82
	movzx	eax, BYTE PTR [r10+rdi]
	mov	r8, r10
; Line 86
	movzx	r8d, BYTE PTR [r10+rdi+120]
	jmp	SHORT $LN30@sliding_at
$LN25@sliding_at:
; Line 81
	mov	r8, r10
	mov	al, 255					; 000000ffH
; Line 85
	cmp	r10d, -1
	je	SHORT $LN32@sliding_at
	cmp	r10d, 119				; 00000077H
	ja	SHORT $LN32@sliding_at
; Line 86
	movzx	r8d, BYTE PTR [r10+rdi+120]
	jmp	SHORT $LN30@sliding_at
$LN32@sliding_at:
; Line 85
	mov	r8b, 255				; 000000ffH
$LN30@sliding_at:
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.hpp
; Line 45
	cmp	r9b, al
	je	SHORT $LN59@sliding_at
	cmp	r11b, r8b
	jne	SHORT $LN54@sliding_at
; Line 56
	cmp	al, r9b
	mov	edx, -1
	mov	r8d, 1
	cmova	edx, r8d
	jmp	SHORT $LN6@sliding_at
$LN59@sliding_at:
; Line 53
	cmp	r8b, r11b
	mov	edx, -10
	mov	eax, 10
	cmova	edx, eax
$LN6@sliding_at:
; Line 60
	add	ecx, edx
; Line 61
	cmp	ecx, r10d
	je	SHORT $LN79@sliding_at
	movsxd	r8, ecx
	mov	r9d, ecx
	add	r8, 240					; 000000f0H
	movsxd	r11, edx
	add	r8, rdi
	npad	4
$LL2@sliding_at:
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\board120.hpp
; Line 91
	cmp	ecx, -1
	je	SHORT $LN3@sliding_at
	cmp	r9d, 119				; 00000077H
	ja	SHORT $LN3@sliding_at
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.hpp
; Line 61
	cmp	BYTE PTR [r8], 0
	je	SHORT $LN3@sliding_at
	movsxd	rax, ecx
; Line 62
	cmp	BYTE PTR [rax+rbx], 0
	jne	SHORT $LN54@sliding_at
; Line 65
	add	ecx, edx
	add	r9d, edx
	add	r8, r11
	cmp	ecx, r10d
	jne	SHORT $LL2@sliding_at
$LN3@sliding_at:
; Line 68
	cmp	ecx, r10d
$LN79@sliding_at:
	sete	al
; Line 69
	mov	rbx, QWORD PTR [rsp+16]
	mov	rdi, QWORD PTR [rsp+24]
	ret	0
$LN54@sliding_at:
	mov	rbx, QWORD PTR [rsp+16]
	xor	al, al
	mov	rdi, QWORD PTR [rsp+24]
	ret	0
?sliding_attacks_rank_file@@YA_NHHAEBVPosition@@@Z ENDP	; sliding_attacks_rank_file
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?king_attacks_square@@YA_NHH@Z
_TEXT	SEGMENT
king_sq$ = 8
target_sq$ = 16
?king_attacks_square@@YA_NHH@Z PROC			; king_attacks_square, COMDAT
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.hpp
; Line 29
	lea	rax, OFFSET FLAT:?KING_DELTAS@@3V?$array@H$07@std@@B ; KING_DELTAS
	lea	r10, OFFSET FLAT:?KING_DELTAS@@3V?$array@H$07@std@@B+32
	npad	2
$LL4@king_attac:
; Line 30
	mov	r9d, DWORD PTR [rax]
	add	r9d, ecx
	cmp	r9d, edx
	je	SHORT $LN8@king_attac
; Line 29
	add	rax, 4
	cmp	rax, r10
	jne	SHORT $LL4@king_attac
; Line 34
	xor	al, al
; Line 35
	ret	0
$LN8@king_attac:
; Line 31
	mov	al, 1
; Line 35
	ret	0
?king_attacks_square@@YA_NHH@Z ENDP			; king_attacks_square
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?knight_attacks_square@@YA_NHH@Z
_TEXT	SEGMENT
knight_sq$ = 8
target_sq$ = 16
?knight_attacks_square@@YA_NHH@Z PROC			; knight_attacks_square, COMDAT
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.hpp
; Line 19
	lea	rax, OFFSET FLAT:?KNIGHT_DELTAS@@3QBHB	; KNIGHT_DELTAS
	lea	r10, OFFSET FLAT:?KNIGHT_DELTAS@@3QBHB+32
	npad	2
$LL4@knight_att:
; Line 20
	mov	r9d, DWORD PTR [rax]
	add	r9d, ecx
	cmp	r9d, edx
	je	SHORT $LN8@knight_att
; Line 19
	add	rax, 4
	cmp	rax, r10
	jne	SHORT $LL4@knight_att
; Line 24
	xor	al, al
; Line 25
	ret	0
$LN8@knight_att:
; Line 21
	mov	al, 1
; Line 25
	ret	0
?knight_attacks_square@@YA_NHH@Z ENDP			; knight_attacks_square
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?pawn_attacks_square@@YA_NHHW4Color@@@Z
_TEXT	SEGMENT
pawn_sq$ = 8
target_sq$ = 16
pawn_color$ = 24
?pawn_attacks_square@@YA_NHHW4Color@@@Z PROC		; pawn_attacks_square, COMDAT
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\attack_detection.hpp
; Line 8
	test	r8b, r8b
	jne	SHORT $LN2@pawn_attac
; Line 10
	lea	eax, DWORD PTR [rcx+11]
	cmp	edx, eax
	je	SHORT $LN7@pawn_attac
	lea	eax, DWORD PTR [rcx+9]
	jmp	SHORT $LN11@pawn_attac
$LN2@pawn_attac:
; Line 13
	lea	eax, DWORD PTR [rcx-9]
	cmp	edx, eax
	je	SHORT $LN7@pawn_attac
	lea	eax, DWORD PTR [rcx-11]
$LN11@pawn_attac:
; Line 15
	cmp	edx, eax
	je	SHORT $LN7@pawn_attac
	xor	al, al
	ret	0
$LN7@pawn_attac:
	mov	al, 1
	ret	0
?pawn_attacks_square@@YA_NHHW4Color@@@Z ENDP		; pawn_attacks_square
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?at@Position@@QEBA?AW4Piece@@H@Z
_TEXT	SEGMENT
this$ = 8
s$ = 16
?at@Position@@QEBA?AW4Piece@@H@Z PROC			; Position::at, COMDAT
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\position.hpp
; Line 178
	cmp	edx, 119				; 00000077H
	ja	SHORT $LN3@at
	movsxd	rax, edx
	movzx	eax, BYTE PTR [rax+rcx]
; Line 179
	ret	0
$LN3@at:
; Line 178
	mov	al, 255					; 000000ffH
; Line 179
	ret	0
?at@Position@@QEBA?AW4Piece@@H@Z ENDP			; Position::at
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??A?$array@W4Piece@@$0HI@@std@@QEBAAEBW4Piece@@_K@Z
_TEXT	SEGMENT
this$ = 8
_Pos$ = 16
??A?$array@W4Piece@@$0HI@@std@@QEBAAEBW4Piece@@_K@Z PROC ; std::array<enum Piece,120>::operator[], COMDAT
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\array
; Line 543
	lea	rax, QWORD PTR [rdx+rcx]
; Line 544
	ret	0
??A?$array@W4Piece@@$0HI@@std@@QEBAAEBW4Piece@@_K@Z ENDP ; std::array<enum Piece,120>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??A?$array@V?$array@H$06@std@@$01@std@@QEBAAEBV?$array@H$06@1@_K@Z
_TEXT	SEGMENT
this$ = 8
_Pos$ = 16
??A?$array@V?$array@H$06@std@@$01@std@@QEBAAEBV?$array@H$06@1@_K@Z PROC ; std::array<std::array<int,7>,2>::operator[], COMDAT
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\array
; Line 543
	imul	rax, rdx, 28
	add	rax, rcx
; Line 544
	ret	0
??A?$array@V?$array@H$06@std@@$01@std@@QEBAAEBV?$array@H$06@1@_K@Z ENDP ; std::array<std::array<int,7>,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??A?$array@H$09@std@@QEBAAEBH_K@Z
_TEXT	SEGMENT
this$ = 8
_Pos$ = 16
??A?$array@H$09@std@@QEBAAEBH_K@Z PROC			; std::array<int,10>::operator[], COMDAT
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\array
; Line 543
	lea	rax, QWORD PTR [rcx+rdx*4]
; Line 544
	ret	0
??A?$array@H$09@std@@QEBAAEBH_K@Z ENDP			; std::array<int,10>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??A?$array@V?$array@H$09@std@@$06@std@@QEBAAEBV?$array@H$09@1@_K@Z
_TEXT	SEGMENT
this$ = 8
_Pos$ = 16
??A?$array@V?$array@H$09@std@@$06@std@@QEBAAEBV?$array@H$09@1@_K@Z PROC ; std::array<std::array<int,10>,7>::operator[], COMDAT
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\array
; Line 543
	lea	rax, QWORD PTR [rdx+rdx*4]
	lea	rax, QWORD PTR [rcx+rax*8]
; Line 544
	ret	0
??A?$array@V?$array@H$09@std@@$06@std@@QEBAAEBV?$array@H$09@1@_K@Z ENDP ; std::array<std::array<int,10>,7>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??A?$array@V?$array@V?$array@H$09@std@@$06@std@@$01@std@@QEBAAEBV?$array@V?$array@H$09@std@@$06@1@_K@Z
_TEXT	SEGMENT
this$ = 8
_Pos$ = 16
??A?$array@V?$array@V?$array@H$09@std@@$06@std@@$01@std@@QEBAAEBV?$array@V?$array@H$09@std@@$06@1@_K@Z PROC ; std::array<std::array<std::array<int,10>,7>,2>::operator[], COMDAT
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\array
; Line 543
	imul	rax, rdx, 280				; 00000118H
	add	rax, rcx
; Line 544
	ret	0
??A?$array@V?$array@V?$array@H$09@std@@$06@std@@$01@std@@QEBAAEBV?$array@V?$array@H$09@std@@$06@1@_K@Z ENDP ; std::array<std::array<std::array<int,10>,7>,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??A?$array@H$01@std@@QEBAAEBH_K@Z
_TEXT	SEGMENT
this$ = 8
_Pos$ = 16
??A?$array@H$01@std@@QEBAAEBH_K@Z PROC			; std::array<int,2>::operator[], COMDAT
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\array
; Line 543
	lea	rax, QWORD PTR [rcx+rdx*4]
; Line 544
	ret	0
??A?$array@H$01@std@@QEBAAEBH_K@Z ENDP			; std::array<int,2>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?pawn_capt_right_black@@YAHXZ
_TEXT	SEGMENT
?pawn_capt_right_black@@YAHXZ PROC			; pawn_capt_right_black, COMDAT
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\board120.hpp
; Line 113
	mov	eax, -11
	ret	0
?pawn_capt_right_black@@YAHXZ ENDP			; pawn_capt_right_black
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?pawn_capt_left_black@@YAHXZ
_TEXT	SEGMENT
?pawn_capt_left_black@@YAHXZ PROC			; pawn_capt_left_black, COMDAT
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\board120.hpp
; Line 112
	mov	eax, -9
	ret	0
?pawn_capt_left_black@@YAHXZ ENDP			; pawn_capt_left_black
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?pawn_capt_right_white@@YAHXZ
_TEXT	SEGMENT
?pawn_capt_right_white@@YAHXZ PROC			; pawn_capt_right_white, COMDAT
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\board120.hpp
; Line 111
	mov	eax, 11
	ret	0
?pawn_capt_right_white@@YAHXZ ENDP			; pawn_capt_right_white
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?pawn_capt_left_white@@YAHXZ
_TEXT	SEGMENT
?pawn_capt_left_white@@YAHXZ PROC			; pawn_capt_left_white, COMDAT
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\board120.hpp
; Line 110
	mov	eax, 9
	ret	0
?pawn_capt_left_white@@YAHXZ ENDP			; pawn_capt_left_white
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?is_playable@@YA_NH@Z
_TEXT	SEGMENT
sq120$ = 8
?is_playable@@YA_NH@Z PROC				; is_playable, COMDAT
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\board120.hpp
; Line 91
	cmp	ecx, -1
	je	SHORT $LN3@is_playabl
	cmp	ecx, 119				; 00000077H
	ja	SHORT $LN3@is_playabl
; Line 92
	movsxd	rax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\array
; Line 543
	lea	rcx, OFFSET FLAT:?FILE_RANK_LOOKUPS@@3UFileRankLookups@@B+240
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\board120.hpp
; Line 92
	movzx	eax, BYTE PTR [rax+rcx]
; Line 93
	ret	0
$LN3@is_playabl:
; Line 91
	xor	al, al
; Line 93
	ret	0
?is_playable@@YA_NH@Z ENDP				; is_playable
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?rank_of@@YA?AW4Rank@@H@Z
_TEXT	SEGMENT
sq120$ = 8
?rank_of@@YA?AW4Rank@@H@Z PROC				; rank_of, COMDAT
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\board120.hpp
; Line 85
	cmp	ecx, -1
	je	SHORT $LN3@rank_of
	cmp	ecx, 119				; 00000077H
	ja	SHORT $LN3@rank_of
; Line 86
	movsxd	rax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\array
; Line 543
	lea	rcx, OFFSET FLAT:?FILE_RANK_LOOKUPS@@3UFileRankLookups@@B+120
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\board120.hpp
; Line 86
	movzx	eax, BYTE PTR [rax+rcx]
; Line 87
	ret	0
$LN3@rank_of:
; Line 85
	mov	al, 255					; 000000ffH
; Line 87
	ret	0
?rank_of@@YA?AW4Rank@@H@Z ENDP				; rank_of
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?file_of@@YA?AW4File@@H@Z
_TEXT	SEGMENT
sq120$ = 8
?file_of@@YA?AW4File@@H@Z PROC				; file_of, COMDAT
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\board120.hpp
; Line 81
	cmp	ecx, -1
	je	SHORT $LN3@file_of
	cmp	ecx, 119				; 00000077H
	ja	SHORT $LN3@file_of
; Line 82
	movsxd	rax, ecx
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\array
; Line 543
	lea	rcx, OFFSET FLAT:?FILE_RANK_LOOKUPS@@3UFileRankLookups@@B ; FILE_RANK_LOOKUPS
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\board120.hpp
; Line 82
	movzx	eax, BYTE PTR [rax+rcx]
; Line 83
	ret	0
$LN3@file_of:
; Line 81
	mov	al, 255					; 000000ffH
; Line 83
	ret	0
?file_of@@YA?AW4File@@H@Z ENDP				; file_of
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??A?$array@_N$0HI@@std@@QEBAAEB_N_K@Z
_TEXT	SEGMENT
this$ = 8
_Pos$ = 16
??A?$array@_N$0HI@@std@@QEBAAEB_N_K@Z PROC		; std::array<bool,120>::operator[], COMDAT
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\array
; Line 543
	lea	rax, QWORD PTR [rdx+rcx]
; Line 544
	ret	0
??A?$array@_N$0HI@@std@@QEBAAEB_N_K@Z ENDP		; std::array<bool,120>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??A?$array@W4Rank@@$0HI@@std@@QEBAAEBW4Rank@@_K@Z
_TEXT	SEGMENT
this$ = 8
_Pos$ = 16
??A?$array@W4Rank@@$0HI@@std@@QEBAAEBW4Rank@@_K@Z PROC	; std::array<enum Rank,120>::operator[], COMDAT
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\array
; Line 543
	lea	rax, QWORD PTR [rdx+rcx]
; Line 544
	ret	0
??A?$array@W4Rank@@$0HI@@std@@QEBAAEBW4Rank@@_K@Z ENDP	; std::array<enum Rank,120>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??A?$array@W4File@@$0HI@@std@@QEBAAEBW4File@@_K@Z
_TEXT	SEGMENT
this$ = 8
_Pos$ = 16
??A?$array@W4File@@$0HI@@std@@QEBAAEBW4File@@_K@Z PROC	; std::array<enum File,120>::operator[], COMDAT
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\array
; Line 543
	lea	rax, QWORD PTR [rdx+rcx]
; Line 544
	ret	0
??A?$array@W4File@@$0HI@@std@@QEBAAEBW4File@@_K@Z ENDP	; std::array<enum File,120>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Unchecked_end@?$array@H$07@std@@QEBAPEBHXZ
_TEXT	SEGMENT
this$ = 8
?_Unchecked_end@?$array@H$07@std@@QEBAPEBHXZ PROC	; std::array<int,8>::_Unchecked_end, COMDAT
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\array
; Line 498
	lea	rax, QWORD PTR [rcx+32]
; Line 499
	ret	0
?_Unchecked_end@?$array@H$07@std@@QEBAPEBHXZ ENDP	; std::array<int,8>::_Unchecked_end
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?_Unchecked_begin@?$array@H$07@std@@QEBAPEBHXZ
_TEXT	SEGMENT
this$ = 8
?_Unchecked_begin@?$array@H$07@std@@QEBAPEBHXZ PROC	; std::array<int,8>::_Unchecked_begin, COMDAT
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\array
; Line 490
	mov	rax, rcx
; Line 491
	ret	0
?_Unchecked_begin@?$array@H$07@std@@QEBAPEBHXZ ENDP	; std::array<int,8>::_Unchecked_begin
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ??A?$array@H$06@std@@QEBAAEBH_K@Z
_TEXT	SEGMENT
this$ = 8
_Pos$ = 16
??A?$array@H$06@std@@QEBAAEBH_K@Z PROC			; std::array<int,7>::operator[], COMDAT
; File C:\Program Files\Microsoft Visual Studio\2022\Community\VC\Tools\MSVC\14.44.35207\include\array
; Line 543
	lea	rax, QWORD PTR [rcx+rdx*4]
; Line 544
	ret	0
??A?$array@H$06@std@@QEBAAEBH_K@Z ENDP			; std::array<int,7>::operator[]
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?color_of@@YA?AW4Color@@W4Piece@@@Z
_TEXT	SEGMENT
p$ = 8
?color_of@@YA?AW4Color@@W4Piece@@@Z PROC		; color_of, COMDAT
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\chess_types.hpp
; Line 122
	lea	eax, DWORD PTR [rcx-1]
	cmp	al, 253					; 000000fdH
	ja	SHORT $LN3@color_of
	shr	cl, 3
	and	cl, 1
	movzx	eax, cl
; Line 123
	ret	0
$LN3@color_of:
; Line 122
	mov	al, 2
; Line 123
	ret	0
?color_of@@YA?AW4Color@@W4Piece@@@Z ENDP		; color_of
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?type_of@@YA?AW4PieceType@@W4Piece@@@Z
_TEXT	SEGMENT
p$ = 8
?type_of@@YA?AW4PieceType@@W4Piece@@@Z PROC		; type_of, COMDAT
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\chess_types.hpp
; Line 119
	lea	eax, DWORD PTR [rcx-1]
	cmp	al, 253					; 000000fdH
	ja	SHORT $LN3@type_of
	and	cl, 7
	movzx	eax, cl
; Line 120
	ret	0
$LN3@type_of:
; Line 119
	xor	al, al
; Line 120
	ret	0
?type_of@@YA?AW4PieceType@@W4Piece@@@Z ENDP		; type_of
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?is_offboard@@YA_NW4Piece@@@Z
_TEXT	SEGMENT
p$ = 8
?is_offboard@@YA_NW4Piece@@@Z PROC			; is_offboard, COMDAT
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\chess_types.hpp
; Line 116
	cmp	cl, 255					; 000000ffH
	sete	al
	ret	0
?is_offboard@@YA_NW4Piece@@@Z ENDP			; is_offboard
_TEXT	ENDS
; Function compile flags: /Ogtpy
;	COMDAT ?is_none@@YA_NW4Piece@@@Z
_TEXT	SEGMENT
p$ = 8
?is_none@@YA_NW4Piece@@@Z PROC				; is_none, COMDAT
; File C:\Users\m_lad\source\repos\MTDuke71\Huginn\src\chess_types.hpp
; Line 115
	test	cl, cl
	sete	al
	ret	0
?is_none@@YA_NW4Piece@@@Z ENDP				; is_none
_TEXT	ENDS
END
